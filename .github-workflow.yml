name: CI Pipeline

on:
  push:
    branches: [test, main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Permite execução manual

env:
  DOCKER_USER: estertavares2025
  DOCKER_IMAGE_NAME: ${{ env.DOCKER_USER }}/eleitor-projeto-app
  DOCKER_REGISTRY: registry.hub.docker.com
  PLATFORMS: linux/amd64,linux/arm64
  CACHE_DIR: .buildx-cache

jobs:
  lint-code:
    name: Lint básico
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: 1.21
      - name: Rodar go fmt e vet
        run: |
          go fmt $(go list ./...)
          go vet $(go list ./...)

  golangci-lint:
    name: Lint avançado
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test'
    steps:
      - uses: actions/checkout@v4
      - uses: golangci/golangci-lint-action@v6
        with:
          version: v1.54

  run-tests:
    name: Testes
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: 1.21
      - name: Instalar dependências
        run: |
          sudo apt update && sudo apt install -y build-essential
          go install gotest.tools/gotestsum@latest
      - name: Executar testes
        run: |
          mkdir -p test-results
          CGO_ENABLED=1 gotestsum --junitfile test-results/report.xml --format testname
      - uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-results

  build-and-push-image:
    name: Build e push Docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: ${{ env.PLATFORMS }}
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:latest
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.run_number }}
            ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

  deploy-to-koyeb:
    name: Deploy via Terraform
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: startsWith(github.ref, 'refs/heads/test')
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform init + apply
        working-directory: infra
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
          TF_VAR_docker_image_name: ${{ env.DOCKER_IMAGE_NAME }}
          TF_VAR_docker_image_tag: ${{ github.run_number }}
        run: |
          terraform init
          terraform validate
          terraform apply -auto-approve

  destroy-staging:
    name: Destroy infra manual
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform destroy
        working-directory: infra
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
        run: |
          terraform init
          terraform destroy -auto-approve
