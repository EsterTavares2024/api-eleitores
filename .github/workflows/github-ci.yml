name: CI/CD Pipeline - Eleitor Projeto

on:
  push:
    branches: [ test, main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Necessário para rodar cleanup manualmente

env:
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_IMAGE_NAME: eleitor-projeto
  DOCKER_REGISTRY: docker.io
  SERVICE_NAME: eleitor-projeto
  KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}


jobs:
  # STAGE: build-lint
  build-lint:
    name: Lint PHP Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Código
        uses: actions/checkout@v4

      - name: Instala PHP e dependências
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, pdo, pdo_mysql
          tools: php-cs-fixer

      - name: Rodar PHP-CS-Fixer
        run: |
          if [ -f vendor/bin/php-cs-fixer ]; then
            vendor/bin/php-cs-fixer fix --dry-run --diff || true
          else
            echo "php-cs-fixer não encontrado. Pulando step."
          fi

  # STAGE: test
  test:
    name: Rodar Testes com PHPUnit
    runs-on: ubuntu-latest
    needs: build-lint

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: db
          MYSQL_USER: admin
          MYSQL_PASSWORD: admin123
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout Código
        uses: actions/checkout@v4

      - name: Instalar PHP e extensões
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, pdo, pdo_mysql, dom
          tools: composer

      - name: Instalar composer
        run: composer install --no-interaction --prefer-dist
      - name: Esperar MySQL estar pronto
        run: |
         until mysqladmin ping -h 127.0.0.1 -uadmin -padmin123 --silent; do
          echo "Aguardando MySQL iniciar..."; sleep 3;
          done


      - name: Rodar PHPUnit
        run: |
          vendor/bin/phpunit --log-junit report.xml

      - name: Upload do Report de Teste
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: report
          path: report.xml

  # STAGE: release
  release:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    env:
      DOCKER_IMAGE_NAME: estertavares2025/eleitor-projeto-app
    steps:
      - name: Checkout Código
        uses: actions/checkout@v4

      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin

      - name: Construir e Enviar Imagem
        run: |
          docker build -t $DOCKER_IMAGE_NAME:latest .
          docker tag $DOCKER_IMAGE_NAME:latest $DOCKER_IMAGE_NAME:${{ github.run_number }}
          docker push $DOCKER_IMAGE_NAME:latest
          docker push $DOCKER_IMAGE_NAME:${{ github.run_number }}

  # STAGE: deploy
  deploy:
    name: Deploy para Koyeb
    runs-on: ubuntu-latest
    needs: release
    timeout-minutes: 120
    steps:
      - name: Checkout Código
        uses: actions/checkout@v4

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configurar Terraform
        run: |
          cd infra
          terraform init
          terraform validate
          terraform plan \
          -var="docker_image_name=${{ env.DOCKER_IMAGE_NAME }}" \
          -var="docker_image_tag=${{ github.run_number }}" \
          -out=tfplan
          terraform apply -auto-approve tfplan

  # STAGE: cleanup (manual only)
  cleanup:
    name: Cleanup - Destroy Infra
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    needs: deploy
    steps:
      - name: Checkout Código
        uses: actions/checkout@v4

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Destruir Infraestrutura
        run: |
          cd infra
          terraform init
          terraform destroy -auto-approve
