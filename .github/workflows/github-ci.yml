name: CI/CD Pipeline - Eleitor Projeto

on:
  push:
    branches:
      - test
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_IMAGE_NAME: eleitor-projeto
  DOCKER_REGISTRY: docker.io
  SERVICE_NAME: eleitor-projeto
  KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}


jobs:
  build-lint:
    name: Lint PHP Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Código
        uses: actions/checkout@v4

      - name: Instala PHP e dependências
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, pdo, pdo_mysql
          tools: php-cs-fixer

      - name: Rodar PHP-CS-Fixer
        run: php-cs-fixer fix --dry-run --diff .

  test:
    name: Rodar Testes com PHPUnit
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: test
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout Código
        uses: actions/checkout@v4

      - name: Instalar PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, pdo, pdo_mysql
          tools: composer

      - name: Instalar dependências
        run: composer install --no-interaction --prefer-dist

      - name: Copiar .env
        run: cp .env.example .env

      - name: Gerar chave da aplicação
        run: php artisan key:generate

      - name: Rodar migrations
        run: php artisan migrate --force

      - name: Rodar PHPUnit
        run: vendor/bin/phpunit --log-junit report.xml

      - name: Upload do Report de Teste
        uses: actions/upload-artifact@v4
        with:
          name: report
          path: report.xml

  release:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build-lint, test]
    steps:
      - name: Checkout Código
        uses: actions/checkout@v4

      - name: Login no Docker Hub
        run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u "${{ secrets.DOCKER_USER }}" --password-stdin

      - name: Construir e Enviar Imagem
        run: |
          docker build -t $DOCKER_IMAGE_NAME:latest .
          docker tag $DOCKER_IMAGE_NAME:latest $DOCKER_IMAGE_NAME:${{ github.run_number }}
          docker push $DOCKER_IMAGE_NAME:latest
          docker push $DOCKER_IMAGE_NAME:${{ github.run_number }}

  deploy:
    name: Deploy para Koyeb
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout Código
        uses: actions/checkout@v4

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configurar Terraform
        run: |
          cd infra
          terraform init
          terraform apply -auto-approve -var="docker_image_name=${{ env.DOCKER_IMAGE_NAME }}" -var="docker_image_tag=${{ github.run_number }}"

  cleanup:
    name: Cleanup - Destroy Infra
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: deploy
    steps:
      - name: Checkout Código
        uses: actions/checkout@v4

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Destruir Infraestrutura
        run: |
          cd infra
          terraform init
          terraform destroy -auto-approve
